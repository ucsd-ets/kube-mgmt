# Default values for opa.
# -----------------------
#
# The 'opa' key embeds an OPA configuration file. See https://www.openpolicyagent.org/docs/configuration.html for more details.
# Use 'opa: false' to disable the OPA configuration and rely on configmaps for policy loading.
# See https://www.openpolicyagent.org/docs/latest/kubernetes-admission-control/#3-deploy-opa-on-top-of-kubernetes and the `mgmt.configmapPolicies` section below for more details.
namespace: opa
opa: 
  services:
    controller:
      url: 'http://bundle-service:5000'
  bundles:
    quickstart:
      service: controller
      resource: /bundle.tar.gz
  default_decision: /system/main

# Setup the webhook using cert-manager
certManager:
  enabled: false
  rootCACertificateDuration: 43800h # 5y
  servingCertificateDuration: 8760h # 1y

# Expose the prometheus scraping endpoint
prometheus:
  enabled: false

## ServiceMonitor consumed by prometheus-operator
serviceMonitor:
  ## If the operator is installed in your cluster, set to true to create a Service Monitor Entry
  enabled: false
  interval: "15s"
  ## Namespace in which the service monitor is created
  # namespace: monitoring
  # Added to the ServiceMonitor object so that prometheus-operator is able to discover it
  ## ref: https://github.com/coreos/prometheus-operator/blob/master/Documentation/api.md#prometheusspec
  additionalLabels: {}

# Annotations in the deployment template
annotations:
  {}

# Bootstrap policies to load upon startup
# Define policies in the form of:
# <policyName> : |-
#   <regoBody>
# For example, to mask the entire input body in the decision logs:
# bootstrapPolicies:
#   log: |-
#     package system.log
#     mask["/input"]
bootstrapPolicies: {}

# Admission controller configuration.
admissionController:
  mutating:
    enabled: true

    # To enforce mutating policies, change to MutatingWebhookConfiguration.
    kind: MutatingWebhookConfiguration

    # To set annotations on all admissionController resources (Secret/Certificate/Issuer/AdmissionController)
    # annotations:
    #   example: value

    # To _fail closed_ on failures, change to Fail. During initial testing, we
    # recommend leaving the failure policy as Ignore.
    failurePolicy: Ignore

    # Adds a namespace selector to the admission controller webhook
    namespaceSelector:
      matchExpressions:
        - {key: openpolicyagent.org/webhook, operator: NotIn, values: [ignore]}

    # SideEffectClass for the webhook, setting to NoneOnDryRun enables dry-run.
    # Only None and NoneOnDryRun are permitted for admissionregistration.k8s.io/v1.
    sideEffect: None

    # To restrict the kinds of operations and resources that are subject to OPA
    # policy checks, see the settings below. By default, all resources and
    # operations are subject to OPA policy checks.
    rules:
      - operations: ["CREATE", "UPDATE"]
        apiGroups: ["*"]
        apiVersions: ["*"]
        resources: ["*"]
        scope: "*"

  validating:
  
    enabled: true

    # To enforce mutating policies, change to MutatingWebhookConfiguration.
    kind: ValidatingWebhookConfiguration

    # To set annotations on all admissionController resources (Secret/Certificate/Issuer/AdmissionController)
    # annotations:
    #   example: value

    # To _fail closed_ on failures, change to Fail. During initial testing, we
    # recommend leaving the failure policy as Ignore.
    failurePolicy: Ignore

    # Adds a namespace selector to the admission controller webhook
    namespaceSelector:
      matchExpressions:
        - {key: openpolicyagent.org/webhook, operator: NotIn, values: [ignore]}

    # SideEffectClass for the webhook, setting to NoneOnDryRun enables dry-run.
    # Only None and NoneOnDryRun are permitted for admissionregistration.k8s.io/v1.
    sideEffect: None

    # To restrict the kinds of operations and resources that are subject to OPA
    # policy checks, see the settings below. By default, all resources and
    # operations are subject to OPA policy checks.
    rules:
      - operations: ["CREATE", "UPDATE"]
        apiGroups: ["*"]
        apiVersions: ["*"]
        resources: ["*"]
        scope: "*"

# The helm Chart will automatically generate a CA and server certificate for
# the OPA. If you want to supply your own certificates, set the field below to
# false and add the PEM encoded CA certificate and server key pair below.
#
# WARNING: The common name name in the server certificate MUST match the
# hostname of the service that exposes the OPA to the apiserver. For example.
# if the service name is created in the "default" nanamespace with name "opa"
# the common name MUST be set to "opa.default.svc".
#
# If the common name is not set correctly, the apiserver will refuse to
# communicate with the OPA.
generateCerts: false
#uses ca cert
CA: 
#TODO: get cert and key to work using non-encoded cert/key and have secret/deployments encode
# uses server cert and key
cert: 
key: 

# Controls a PodDisruptionBudget for the OPA pod. Suggested use if having opa
# always running for admission control is important
podDisruptionBudget:
  enabled: false
  minAvailable: 1
# maxUnavailable: 1

authz:
  # Disable if you don't want authorization.
  # Mostly useful for debugging.
  enabled: false

# Use hostNetwork setting on OPA pod
hostNetwork:
  enabled: false

# Docker image and tag to deploy.
image: openpolicyagent/opa
imageTag: 0.37.0
imagePullPolicy: IfNotPresent

# One or more secrets to be used when pulling images
imagePullSecrets: []
# - registrySecretName

# Port to which the opa pod will bind itself
# NOTE IF you use a different port make sure it maches the ones in the readinessProbe
# and livenessProbe
port: 443

extraArgs: [
  "--set=decision_logs.console=true"
]

# Extra environment variables to be loaded into the OPA container
extraEnv: 
  - name: AWSED_API_KEY
    value: ""
  - name: AWSED_URL
    value: ""
  

mgmt:
  enabled: true
  image: openpolicyagent/kube-mgmt
  imageTag: 4.1.0 # appVersion is used by default, set to desired value to override
  imagePullPolicy: IfNotPresent
# NOTE insecure http port conjointly used for mgmt access and prometheus metrics export
  port: 8181
  extraArgs: []
  extraEnv: []
  resources: {}
    # requests: 
    #   cpu: 2
    #   memory: 8Gi
    # limits: 
    #   cpu: 4
    #   memory: 16Gi
  data:
    enabled: false
  configmapPolicies:
# NOTE IF you use these, remember to update the RBAC rules below to allow
#      permissions to get, list, watch, patch and update configmaps
    enabled: true
    namespaces: []
    requireLabel: false
  replicate:
# NOTE IF you use these, remember to update the RBAC rules below to allow
#      permissions to replicate these things
    cluster: ["v1/namespaces"]
#     - [group/]version/resource
    namespace: ["extensions/v1beta1/ingresses","v1/pods","apps/v1/deployments"]
#     - [group/]version/resource
    path: kubernetes

# Log level for OPA ('debug', 'info', 'error') (app default=info)
logLevel: info

# Log format for OPA ('text', 'json') (app default=text)
logFormat: json

# Number of OPA replicas to deploy. OPA maintains an eventually consistent
# cache of policies and data. If you want high availability you can deploy two
# or more replicas.
replicas: 1

# To control how the OPA is scheduled on the cluster, set the affinity,
# tolerations and nodeSelector values below. For example, to deploy OPA onto
# the master nodes, 1 replica per node:
#
# affinity:
#   podAntiAffinity:
#     requiredDuringSchedulingIgnoredDuringExecution:
#     - labelSelector:
#         matchExpressions:
#         - key: "app"
#           operator: In
#           values:
#           - opa
#       topologyKey: "kubernetes.io/hostname"
# tolerations:
# - key: "node-role.kubernetes.io/master"
#   effect: NoSchedule
#   operator: Exists
# nodeSelector:
#   kubernetes.io/role: "master"
affinity: {}
tolerations: 
- key: node-type
  operator: Equal
  value: apps
- key: node-type
  operator: Equal
  value: spare

topologySpreadConstraings: []
nodeSelector: {}

# To control the CPU and memory resource limits and requests for OPA, set the
# field below.
resources: {}
  # requests: 
  #   cpu: 2
  #   memory: 8Gi
  # limits: 
  #   cpu: 4
  #   memory: 16Gi
  

    
rbac:
  # If true, create RBAC resources
  create: false

serviceAccount:
  # Specifies whether a ServiceAccount should be created
  create: true
  # The name of the ServiceAccount to use.
  # If not set and create is true, a name is generated using the fullname template
  name:

# This proxy allows opa to make Kubernetes SubjectAccessReview checks against the
# Kubernetes API. You can get a rego function at github.com/open-policy-agent/library
sar:
  enabled: false
  image: lachlanevenson/k8s-kubectl
  imageTag: latest
  imagePullPolicy: IfNotPresent
  resources: {}

# Set a priorityClass using priorityClassName
# priorityClassName:

# Timeout for a webhook call in seconds.
# Starting in kubernetes 1.14 you can set the timeout and it is
# encouraged to use a small timeout for webhooks. If the webhook call times out, the request
# the request is handled according to the webhook'sfailure policy.
# timeoutSeconds: 20

securityContext:
  enabled: false
  runAsNonRoot: true
  runAsUser: 1

deploymentStrategy: {}
  # rollingUpdate:
  #   maxSurge: 1
  #   maxUnavailable: 0
  # type: RollingUpdate

extraContainers: []
## Additional containers to be added to the opa pod.
# - name: example-app
#   image: example/example-app:latest
#   args:
#     - "run"
#     - "--port=11811"
#     - "--config=/etc/example-app-conf/config.yaml"
#     - "--opa-endpoint=https://localhost:443"
#   ports:
#     - name: http
#       containerPort: 11811
#       protocol: TCP
#   volumeMounts:
#     - name: example-app-auth-config
#       mountPath: /etc/example-app-conf

extraVolumes: []
## Additional volumes to the opa pod.
# - name: example-app-auth-config
#   secret:
#     secretName: example-app-auth-config

extraPorts: []
## Additional ports to the opa services. Useful to expose extra container ports.
# - port: 11811
#   protocol: TCP
#   name: http
#   targetPort: http

# topologySpreadConstraints:
#   - maxSkew: 1
#     topologyKey: admin-zone
#     whenUnsatisfiable: DoNotSchedule
#     labelSelector:
#       matchLabels:
#         app: opa
opaViewer:
  name: opa-viewer
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: view
  subjects: 
  - kind: Group
    name: system:serviceaccounts:opa
    apiGroup: rbac.authorization.k8s.io

configmapModifier:
  rules: 
  - apiGroups: [""]
    resources: ["configmaps"]
    verbs: ["update", "patch"]
  
  roleRef: 
    apiGroup: rbac.authorization.k8s.io
    kind: Role
    name: configmap-modifier
  subjects: 
  - kind: Group
    name: system:serviceaccounts:opa
    apiGroup: rbac.authorization.k8s.io
  